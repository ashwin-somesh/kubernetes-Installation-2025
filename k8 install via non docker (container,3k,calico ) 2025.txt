Kubernetes Installation on AWS Ubuntu instance with non docker method (New 2025 method )

1.  As pre requiste you should have instance with ubuntu flavour in aws.
2.  Connect to the ssh instance using gitbash.
3.  Install required dependency as follows;

            Weâ€™ll go in this order:
               * Prepare AWS Instances (Master & Workers)
               * Install container runtime (containerd)
               * Install kubeadm, kubelet, kubectl
               * Initialize Kubernetes on Master
               * Join Worker Nodes to Cluster
               * Install CNI (Calico)
               * Run a test deployment

 Prepare AWS Instances
      Master: t2.medium (2 vCPU, 4GB RAM) â€” Ubuntu 22.04
      Workers: t2.micro (1 vCPU, 1GB RAM) â€” Ubuntu 22.04
      Security group: allow SSH (22), HTTP (80), HTTPS (443), and Kubernetes ports (6443, 10250, 30000-32767) for all nodes.
      Run these commands on all nodes:

                    # Update packages
                    sudo apt update && sudo apt upgrade -y
                    
                    # Disable swap (required for kubeadm)
                    sudo swapoff -a
                    sudo sed -i '/ swap / s/^/#/' /etc/fstab
                    
                    # Load kernel modules
                    cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
                    overlay
                    br_netfilter
                    EOF
                    sudo modprobe overlay
                    sudo modprobe br_netfilter
                    
                    # Set sysctl params
                    cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
                    net.bridge.bridge-nf-call-iptables  = 1
                    net.bridge.bridge-nf-call-ip6tables = 1
                    net.ipv4.ip_forward                 = 1
                    EOF
                    sudo sysctl --system


    Install containerd (Container Runtime)
      Kubernetes now prefers containerd directly.

                    # Install dependencies
                    sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
                    
                    # Install containerd
                    sudo apt install -y containerd
                    
                    # Configure containerd
                    sudo mkdir -p /etc/containerd
                    containerd config default | sudo tee /etc/containerd/config.toml
                    
                    # Set systemd as cgroup driver
                    sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
                    
                    # Restart containerd
                    sudo systemctl restart containerd
                    sudo systemctl enable containerd

Install kubeadm, kubelet, kubectl
    Run on all nodes:

                    sudo mkdir -p /etc/apt/keyrings
                    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
                    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
                    
                    sudo apt update
                    sudo apt install -y kubelet kubeadm kubectl
                    sudo apt-mark hold kubelet kubeadm kubectl

Initialize Kubernetes on Master
    On Master Node Only:

                    # Replace with master's private IP
                    MASTER_IP=$(hostname -I | awk '{print $1}')
                    
                    sudo kubeadm init --apiserver-advertise-address=$MASTER_IP --pod-network-cidr=192.168.0.0/16


When it completes, it will show a kubeadm join command â€” copy this for later.
    Set up kubectl for your user:

                    mkdir -p $HOME/.kube
                    sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
                    sudo chown $(id -u):$(id -g) $HOME/.kube/config

Install CNI (Calico)
    Run on Master:
                   kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.2/manifests/calico.yaml

Wait for pods to be Running:

                    kubectl get pods -n kube-system

 Join Worker Nodes
    On each worker node, paste the join command from step 4, e.g.:

                    sudo kubeadm join <MASTER_IP>:6443 --token <TOKEN> \
                        --discovery-token-ca-cert-hash sha256:<HASH>
After joining, check from Master:

                    kubectl get nodes

You should see master + 2 workers in Ready state.

Run a Test Deployment

                  kubectl create deployment nginx --image=nginx --replicas=3
                  kubectl expose deployment nginx --type=NodePort --port=80
                  
                  kubectl get pods -o wide
                  kubectl get svc nginx
Access via:
http://<Any_Node_Public_IP>:<NodePort>

Scale the Deployment

            # Scale up to 5 replicas
            kubectl scale deployment nginx-demo --replicas=5
            
            # Check if pods scaled
            kubectl get pods -o wide

Update the Deployment

            # Update the image from nginx:latest to nginx:1.25
            kubectl set image deployment/nginx-demo nginx=nginx:1.25 --record
            
            # Check rollout status
            kubectl rollout status deployment/nginx-demo
            
            # View history of changes
            kubectl rollout history deployment/nginx-demo

ðŸ’¡ If something goes wrong:

            # Rollback to previous version
            kubectl rollout undo deployment/nginx-demo

Delete the Deployment

            # Delete deployment
            kubectl delete deployment nginx-demo
            
            # Delete service
            kubectl delete svc nginx-demo
            
            # Confirm all resources are gone
            kubectl get all

=====================================================================================











